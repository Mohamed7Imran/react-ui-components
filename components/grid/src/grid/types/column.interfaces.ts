import { TextAlign, ClipMode, ColumnType } from '../types/enum';
import { CSSProperties, ReactElement, ReactNode, TdHTMLAttributes, ThHTMLAttributes, RefObject, JSX } from 'react';
import { DateFormatOptions, NumberFormatOptions } from '@syncfusion/react-base';
import { ValueType, IRow, ICell } from '../types/interfaces';
import { FilterType, FilterBarType } from './index';
import { ColumnEditConfig, EditTemplateProps } from '../types/edit.interfaces';
import { FormValueType } from '@syncfusion/react-inputs';
import { NumericTextBoxProps, TextBoxProps } from '@syncfusion/react-inputs';
import { DatePickerProps } from '@syncfusion/react-calendars';
import { DropDownListProps } from '@syncfusion/react-dropdowns';

/**
 * Defines the properties for configuring a column in the grid, including layout, behavior, and data binding options.
 * Specifies comprehensive column settings that control appearance, functionality, and user interaction capabilities.
 * Enables customization of sorting, filtering, editing, and display characteristics for individual grid columns.
 */
export interface ColumnProps {
    /**
     * Defines the field name that maps the column to a specific data source property for data binding operations.
     * Enables sorting and filtering functionality based on the specified field name within the dataset.
     * Strongly recommended to avoid JavaScript reserved words and special characters in the field name for optimal compatibility.
     *
     * @default ''
     */
    field?: string;

    /**
     * Defines the unique identifier for the column used internally by the grid for referencing and tracking operations.
     * Specifies a distinct value that enables the grid to manage column state and perform internal operations efficiently.
     * Automatically generated by the grid system when not explicitly provided during column configuration.
     *
     * @private
     * @default ''
     */
    uid?: string;

    /**
     * Specifies the column's position in the grid's column collection, controlling display order.
     *
     * @private
     * @default -
     */
    index?: number;

    /**
     * Sets the text displayed in the column header. Defaults to the `field` name if not set.
     * Provides a user-friendly label for the column.
     *
     * @default -
     */
    headerText?: string;

    /**
     * Defines the column width in pixels (e.g., 100) or percentage (e.g., '20%').
     * Controls the column's size in the grid layout.
     *
     * @default ''
     */
    width?: string | number;

    /**
     * Aligns text in header and content cells (e.g., `Left`, `Right`, `Center`).
     * Enhances visual consistency across the column.
     *
     * @default TextAlign.Left | 'Left'
     */
    textAlign?: TextAlign | string;

    /**
     * Aligns text specifically in the header cell (e.g., `Left`, `Right`, `Center`).
     * Overrides `textAlign` for header-specific styling.
     *
     * @default -
     */
    headerTextAlign?: TextAlign | string;

    /**
     * Defines the cell content's overflow mode. The available modes are
     * * `Clip` -  Truncates the cell content when it overflows its area.
     * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
     * * `EllipsisWithTooltip` - Applies an ellipsis to overflowing cell content and displays a tooltip on hover for enhanced readability.
     *
     * @default ClipMode.Ellipsis | 'Ellipsis'
     */
    clipMode?: ClipMode | string;

    /**
     * If false, encodes HTML in header and content cells, preventing raw HTML rendering.
     * When true, allows raw HTML but requires caution for security.
     *
     * @default true
     */
    disableHtmlEncode?: boolean;

    /**
     * Specifies the column's data type (e.g., `string`, `number`, `date`).
     * Influences sorting, filtering, and formatting behavior.
     *
     * @default null
     */
    type?: ColumnType | string;

    /**
     * Defines the format for cell values (e.g., `C2` for currency or custom `NumberFormatOptions`/`DateFormatOptions`).
     * Applied before rendering without altering the original data.
     *
     * @default null
     */
    format?: string | NumberFormatOptions | DateFormatOptions;

    /**
     * If false, hides the column. Defaults to true for visibility.
     * Useful for conditional display based on user roles or state.
     *
     * @default true
     */
    visible?: boolean;

    /**
     * Renders custom content in data cells using a template string, function, or HTML element ID.
     * Enables complex or dynamic cell layouts.
     *
     * @default null
     */
    template?: string | ReactElement | ((props?: ColumnTemplateProps) => ReactElement | string);

    /**
     * Renders custom content in the header cell using a template string, function, or HTML element ID.
     * Supports advanced header customization like icons or buttons.
     *
     * @default null
     */
    headerTemplate?: string | ReactElement | ((props?: ColumnHeaderTemplateProps) => ReactElement | string);

    /**
     * If false, disables sorting for the column, preventing header click sorting.
     * Defaults to true, enabling sorting.
     *
     * @default true
     */
    allowSort?: boolean;

    /**
     * If false, disables filtering for the column, hiding filter bar or menu.
     * Defaults to true, enabling filtering.
     *
     * @default true
     */
    allowFilter?: boolean;

    /**
     * If false, disables editing for the column's cells in edit mode.
     * Defaults to true, allowing editing.
     *
     * @default true
     */
    allowEdit?: boolean;

    /**
     * Applies custom CSS styles or attributes (e.g., `class`, `style`) to the column's cells.
     * Enables tailored styling or behavior customization.
     *
     * @private
     * @default -
     */
    customAttributes?: CustomAttributes;

    /**
     * If true, displays boolean values as checkboxes instead of text.
     *
     * @default false
     */
    displayAsCheckBox?: boolean;

    /**
     * Fires when a data cell begins to render or refresh in the grid.
     * Allows transformation of cell values for display purposes only.
     * Does not affect the underlying data source.
     *
     * @event onValueAccessor
     * @example
     * ```tsx
     * const GridComponent = () => {
     *   const handleValueAccessor = (args: ValueAccessorEvent) => {
     *     return `#${args.rowData[args.field]}`;
     *   };
     *
     *   return (
     *     <Grid dataSource={orderData}>
     *       <Columns>
     *         <Column field="OrderID" onValueAccessor={handleValueAccessor} />
     *       </Columns>
     *     </Grid>
     *   );
     * };
     * ```
     */
    onValueAccessor?: (props?: ValueAccessorEvent) => ValueType;

    /**
     * Fires when a header cell begins to render or refresh in the grid.
     * Allows transformation of header text for display purposes only.
     * Does not affect the underlying data source.
     *
     * @event onHeaderValueAccessor
     * @example
     * ```tsx
     * const GridComponent = () => {
     *   const handleHeaderValueAccessor = (args: HeaderValueAccessorEvent) => {
     *     return `Column: ${args.headerText}`;
     *   };
     *
     *   return (
     *     <Grid dataSource={orderData}>
     *       <Columns>
     *         <Column field="OrderID" onHeaderValueAccessor={handleHeaderValueAccessor} />
     *       </Columns>
     *     </Grid>
     *   );
     * };
     * ```
     */
    onHeaderValueAccessor?: (props?: HeaderValueAccessorEvent) => ValueType;


    /**
     * Defines nested columns for stacked or hierarchical headers.
     * Supports multi-level column structures for complex grids.
     *
     * @private
     * @default null
     */
    columns?: ColumnProps[];

    /**
     * If true, marks the column as a primary key for unique record identification.
     * Critical for editing, adding and deleting operations.
     *
     * @default false
     */
    isPrimaryKey?: boolean;

    /**
     *  Defines the filter options to customize filtering for the particular column.
     *
     *  @default {}
     */
    filter?: ColumnFilterConfig;

    /**
     * Validation rules for editing (e.g., `required`, `minLength`).
     * Ensures valid input during create or update operations.
     *
     * @default null
     */
    validationRules?: ColumnValidationConfig;

    /**
     * Default value for the column when adding new records.
     * Ensures consistent initial values for new entries.
     *
     * @default null
     */
    defaultValue?: string | number | Date | boolean | null;

    /**
     * Custom edit cell configuration for advanced editing, such as custom input types or validation logic.
     * Enhances editing flexibility.
     *
     * @default {}
     */
    edit?: ColumnEditConfig;

    /**
     * If true, marks the column as an identity column for auto-incrementing values.
     * Typically used for primary keys.
     *
     * @private
     * @default false
     */
    isIdentity?: boolean;

    /**
     * Media query to hide the column based on screen size or device (e.g., `(max-width: 600px)`).
     * Supports responsive grid layouts.
     *
     * @private
     * @default ''
     */
    hideAtMedia?: string;

    /**
     * Fires when a sorting operation begins on a each grid column.
     * Allows overriding the default sorting behavior with custom logic by comparing reference and comparer values.
     * Advanced custom sorting can be implemented using complete row data and the current sort direction context.
     *
     * @event onSortComparer
     *
     * @param referenceValue - The value from the reference row to compare. Typically the current row being sorted.
     * @param comparerValue - The value from the comparer row to compare against. Used to determine sort order.
     * @param referenceRowData - Optional. Complete data object of the reference row. Useful for advanced sorting logic.
     * @param comparerRowData - Optional. Complete data object of the comparer row. Useful for advanced sorting logic.
     * @param sortDirection - Optional. Current sort direction: 'Ascending', 'Descending', or ''. Helps determine sort logic flow.
     *
     * @returns A number or string indicating the sort order. Return a negative number if referenceValue should come before comparerValue, positive if after, or zero if equal.
     *
     * @example
     * ```tsx
     * const GridComponent = () => {
     *   const handleSortComparer = (
     *     referenceValue: ValueType,
     *     comparerValue: ValueType,
     *     referenceRowData?: Object,
     *     comparerRowData?: Object,
     *     sortDirection?: string
     *   ): number => {
     *     // Custom sort logic based on values and optional row data
     *     return referenceValue > comparerValue ? 1 : -1;
     *   };
     *
     *   return (
     *     <Grid
     *       dataSource={orderData}
     *       sortSettings={{ enabled: true }}
     *     >
     *       <Columns>
     *         <Column field="OrderID" onSortComparer={handleSortComparer} />
     *       </Columns>
     *     </Grid>
     *   );
     * };
     * ```
     */
    onSortComparer?: (referenceValue: ValueType, comparerValue: ValueType, referenceRowData?: Object,
        comparerRowData?: Object, sortDirection?: string) => number | string;


    /**
     * Template for the column's edit UI, as a string, function, or HTML element ID.
     * Customizes the editor during editing.
     *
     * @default null
     */
    editTemplate?: string | ReactElement | ((args: EditTemplateProps) => React.ReactElement);

    /**
     * Template for the column's filter UI, as a string, function, or HTML element ID.
     * Customizes the filter interface.
     *
     * @default null
     */
    filterTemplate?: string | ReactElement | Function;

    /**
     * If true, enables searching for the column in the grid's search bar.
     *
     * @default true
     */
    allowSearch?: boolean;

    /**
     * Configures the 'aria-label' behavior for cells rendered using column templates.
     * Improves accessibility by providing screen readers with meaningful labels when templates are used in grid columns.
     *
     * @default {}
     */
    templateSettings?: TemplateConfig;

    /**
     * Gets the formatter function for the column.
     *
     * @returns {Function} The formatter function
     * @private
     */
    getFormatter?: Function;

    /**
     * Gets the parser function for the column.
     *
     * @returns {Function} The parser function
     * @private
     */
    getParser?: Function;

    /**
     * Sets the format function for the column.
     *
     * @private
     */
    formatFn?: Function;

    /**
     * Sets the parser function for the column.
     *
     * @private
     */
    parseFn?: Function;

    /**
     * Formats a value for display in the column cell.
     *
     * @param {string | Object | null} value - The value to format
     * @returns {string} The formatted value
     * @private
     */
    formatValue?: (value: string | Object | null) => string;

    /**
     * Specifies child elements to be rendered within the column, typically React components or nodes for custom rendering.
     *
     * @private
     */
    children?: ReactNode;

    /**
     * Specifies the current sorting direction applied to the column.
     *
     * @private
     * @default ''
     */
    sortDirection?: string;

    /**
     * Fires for each content cell during data binding or  subsequent content cell refresh cycles.
     * Enables dynamic assignment of CSS class names to content cells based on row and column context,
     * allowing customization of cell appearance.
     *
     * @param props - Contains column configuration, complete row data, and row index.
     * @returns A CSS class name to apply to the cell.
     *
     * @default -
     * @example
     * ```tsx
     * const GridComponent = () => {
     *   const handleCellClass = (args: DataCellClassEvent) => {
     *     return args.rowIndex % 2 === 0 ? 'even-row' : 'odd-row';
     *   };
     *
     *   return (
     *     <Grid
     *       dataSource={data}
     *     >
     *       <Columns>
     *         <Column field='OrderID' dataCellClass={handleCellClass}/>
     *       </Columns>
     *     </Grid>
     *   );
     * };
     * ```
     */
    dataCellClass?: string | ((props?: DataCellClassEvent) => string);

    /**
     * Fires for each header cell during initial rendering or subsequent header cell refresh cycles.
     * Enables dynamic assignment of CSS class names to header cells based on column configuration and header row index.
     *
     * @param props - Contains column configuration and header row index.
     * @returns A CSS class name to apply to the header cell.
     *
     * @default -
     * @example
     * ```tsx
     * const GridComponent = () => {
     *   const handleHeaderCellClass = (args: HeaderCellClassEvent) => {
     *     return args.column.field === 'OrderID' ? 'highlight-header' : '';
     *   };
     *
     *   return (
     *     <Grid
     *       dataSource={data}
     *     >
     *       <Columns>
     *         <Column field='OrderID' headerCellClass={handleHeaderCellClass}/>
     *       </Columns>
     *     </Grid>
     *   );
     * };
     * ```
     */
    headerCellClass?: string | ((props?: HeaderCellClassEvent) => string);
}

/**
 * Defines event arguments for applying custom CSS classes to data cells in the Syncfusion React Grid.
 * Provides metadata to dynamically style cells based on column configuration, row data, or row position.
 * Used to customize the visual appearance of individual cells during rendering.
 */
export interface DataCellClassEvent {
    /**
     * Represents the column configuration associated with the data cell.
     * Includes metadata such as field, type, format, and other column-specific properties.
     * Enables conditional styling logic to the data cell based on column attributes.
     *
     * @default -
     */
    column: ColumnProps;

    /**
     * Contains the complete data object for the row containing the cell.
     * Enables conditional styling logic based on any field value within the row.
     * Useful for dynamic styling to the data cell based on business rules or row data context.
     *
     * @default -
     */
    rowData: Object;

    /**
     * Specifies the zero-based index of the row in the grid.
     * Identifies the row’s position, enabling row-specific styling such as alternating row colors.
     * Used for applying CSS classes to the data cell based on row position or sequence.
     *
     * @default -
     */
    rowIndex: number;
}

/**
 * Defines event arguments for applying custom CSS classes to header cells in the Syncfusion React Grid.
 * Provides metadata to dynamically style header cells based on column configuration or row position.
 * Used to customize the visual appearance of column headers during rendering.
 */
export interface HeaderCellClassEvent {
    /**
     * Represents the column configuration associated with the header cell.
     * Includes metadata such as field, type, format, and other column-specific properties.
     * Enables conditional styling logic to the header cell based on column properties.
     *
     * @default -
     */
    column: ColumnProps;

    /**
     * Specifies the zero-based index of the header row in the grid.
     * Identifies the header row’s position, useful for multi-level headers or conditional styling.
     * Used to apply additional CSS classes to the header cell based on header row context.
     *
     * @default -
     */
    rowIndex: number;
}

/**
 * Represents the contextual properties passed to column template functions in the Syncfusion React Grid.
 * Enables dynamic rendering of custom cell content by providing access to row data, column metadata, and row index.
 * Commonly used in template-based columns to implement flexible and user-defined cell rendering logic.
 */
export interface ColumnTemplateProps {
    /**
     * The complete data object for the row associated with the current cell.
     * Grants access to all fields in the row, allowing template logic to render or manipulate cell content based on row-level data.
     *
     * @default {}
     */
    rowData: Object;

    /**
     * The column configuration object containing metadata such as field name, data type, and formatting options.
     * Facilitates context-aware rendering by enabling templates to adapt based on column-specific attributes.
     *
     * @default {}
     */
    column: ColumnProps;

    /**
     * The zero-based index of the row within the grid.
     * Useful for implementing conditional rendering or styling logic based on the row’s position.
     *
     * @default -
     */
    rowIndex: number;
}

/**
 * Represents the contextual properties passed to column header template functions in the Syncfusion React Grid.
 * Enables dynamic rendering of custom header content by providing access to column metadata and index.
 * Commonly used in template-based headers to implement flexible and user-defined header rendering logic.
 */
export interface ColumnHeaderTemplateProps {
    /**
     * The column configuration object containing metadata such as field name, data type, and formatting options.
     * Facilitates context-aware header rendering by enabling templates to adapt based on column-specific attributes.
     *
     * @default {}
     */
    column: ColumnProps;

    /**
     * The zero-based index of the column within the grid.
     * Useful for implementing conditional rendering or styling logic based on the column’s position.
     *
     * @default -
     */
    columnIndex: number;
}
/**
 * @private
 */
export type CustomAttributes = (TdHTMLAttributes<HTMLTableCellElement> | ThHTMLAttributes<HTMLTableCellElement>) & {
    index?: number;
    [key: string]: string | number | boolean | undefined | readonly string[] | CSSProperties;
};


/**
 * Defines event arguments for customizing header cell rendering in the Syncfusion React Grid.
 * Enables dynamic transformation of header text based on column metadata or application requirements.
 * Used to modify or localize header content during rendering.
 */
export interface HeaderValueAccessorEvent {
    /**
     * Specifies the text displayed in the header cell of the grid.
     * Allows modification for purposes such as localization, formatting, or custom display logic.
     * Reflects the visible header content for the associated column.
     *
     * @default -
     */
    headerText: string;

    /**
     * Contains the column configuration object with metadata such as field name, type, or formatting.
     * Provides context for dynamic header rendering, enabling logic based on column properties.
     * Used to customize header text or behavior for specific columns.
     *
     * @default -
     */
    column: ColumnProps;
}

/**
 * Defines event arguments for customizing data cell rendering in the Syncfusion React Grid. It enables modification of displayed content
 * based on the column field and row data, strictly for presentation purposes. These changes do not affect the original data source, and
 * operations such as filtering, sorting, searching, CRUD actions, etc., are based on the actual source values.
 */
export interface ValueAccessorEvent {
    /**
     * Specifies the field name of the column being rendered. Identifies the corresponding data key in the row object. Typically accessed
     * directly when transforming or displaying cell values, without referencing the full column configuration.
     * @default -
     */
    field: string;

    /**
     * Contains the complete data object for the row being rendered, providing access to all field values and enabling calculations
     * across fields, merging or transforming values, applying conditional formatting, and customizing cell display logic based on row data.
     *
     * @default -
     */
    rowData: Object;

    /**
     * Defines the column configuration object, including metadata such as field, type, headerText, and other column-specific properties.
     * Provides context for dynamic cell rendering and supports logic based on the column’s definition. Commonly used when customizing cell content according to column settings.
     *
     * @default -
     */
    column: ColumnProps;
}

/**
 * Defines configuration options for template-based columns in the Syncfusion React Grid.
 *
 * This interface is used to control accessibility attributes applied to grid cells rendered using templates.
 * It helps improve usability for assistive technologies and ensures compliance with accessibility standards.
 */
export interface TemplateConfig {
    /**
     * Specifies the value of the aria-label attribute applied to cells in template-based columns.
     *
     * When this property is set, the grid assigns the provided string as an accessibility label
     * to each template cell in the column. This enhances screen reader support and improves accessibility
     * for users relying on assistive technologies. If left empty, the aria-label attribute is not applied.
     *
     * @default ''
     */
    ariaLabel?: string;
}

/**
 * Defines validation rules for column editing in the Syncfusion React Grid to ensure data integrity.
 * Specifies constraints and checks for input values during cell editing operations.
 * Used to enforce data quality and consistency in editable grid columns.
 */
export interface ColumnValidationConfig {
    /**
     * Indicates whether the field is mandatory during editing.
     * When true, requires a non-empty value to pass validation. when false, allows empty inputs.
     * Ensures critical fields contain valid data before submission.
     *
     * @default false
     */
    required?: boolean;

    /**
     * Specifies the minimum length for string values in the field.
     * Enforces a lower bound on the number of characters allowed during editing.
     * Used to ensure string inputs meet minimum length requirements.
     *
     * @default null
     */
    minLength?: number;

    /**
     * Specifies the maximum length for string values in the field.
     * Enforces an upper bound on the number of characters allowed during editing.
     * Used to restrict string inputs to a maximum length.
     *
     * @default null
     */
    maxLength?: number;

    /**
     * Specifies the minimum value for numeric inputs in the field.
     * Enforces a lower bound for numeric data during editing.
     * Used to ensure numeric inputs meet minimum value requirements.
     *
     * @default null
     */
    min?: number;

    /**
     * Specifies the maximum value for numeric inputs in the field.
     * Enforces an upper bound for numeric data during editing.
     * Used to restrict numeric inputs to a maximum value.
     *
     * @default null
     */
    max?: number;

    /**
     * Defines a range [min, max] for numeric values in the field.
     * Enforces both lower and upper bounds for numeric inputs in a single rule.
     * Used to ensure numeric inputs fall within a specific range.
     *
     * @default null
     */
    range?: [number, number];

    /**
     * Defines a range [min, max] for the length of string values in the field.
     * Enforces both lower and upper bounds for string length during editing.
     * Used to ensure string inputs fall within a specific length range.
     *
     * @default null
     */
    rangeLength?: [number, number];

    /**
     * Specifies a regular expression pattern for custom validation of the field’s value.
     * Enforces pattern matching for string inputs, such as specific formats or character sets.
     * Used to implement complex validation rules via regex.
     *
     * @default null
     */
    regex?: RegExp | string;

    /**
     * Defines a custom validation function for the field’s value.
     * Executes user-defined logic to validate input, returning an error message or null if valid.
     * Used for bespoke validation scenarios not covered by standard rules.
     *
     * @param {FormValueType} value - The value to validate
     * @returns {string | null} Error message or null if valid
     * @default null
     */
    customValidator?: (value: FormValueType) => string | null;

    /**
     * Indicates whether the field’s value must be a valid number.
     * When true, enforces numeric validation, rejecting non-numeric inputs.
     * Used for fields that require numeric data, such as quantities or prices.
     *
     * @default false
     */
    number?: boolean;

    /**
     * Indicates whether the field’s value must be a valid date.
     * When true, enforces date format validation, rejecting invalid date inputs.
     * Used for fields that require date values, such as deadlines or birthdate.
     *
     * @default false
     */
    date?: boolean;

    /**
     * Indicates whether the field’s value must be a valid email address.
     * When true, enforces email format validation, rejecting invalid email inputs.
     * Used for fields that require email addresses.
     *
     * @default false
     */
    email?: boolean;

    /**
     * Indicates whether the field’s value must be a valid URL.
     * When true, enforces URL format validation, rejecting invalid URL inputs.
     * Used for fields that require web addresses or links.
     *
     * @default false
     */
    url?: boolean;

    /**
     * Indicates whether the field’s value must contain only digits.
     * When true, enforces validation for numeric-only strings, rejecting non-digit characters.
     * Used for fields like postal codes or phone numbers.
     *
     * @default false
     */
    digits?: boolean;

    /**
     * Indicates whether the field’s value must be a valid credit card number.
     * When true, enforces credit card format validation, rejecting invalid card numbers.
     * Used for fields that require payment card information.
     *
     * @default false
     */
    creditCard?: boolean;

    /**
     * Indicates whether the field’s value must be a valid telephone number.
     * When true, enforces phone number format validation, rejecting invalid phone inputs.
     * Used for fields that require contact numbers.
     *
     * @default false
     */
    tel?: boolean;

    /**
     * Specifies the field name of another field whose value must match this field’s value.
     * Enforces equality between two fields, such as password confirmation.
     * Used for validation scenarios requiring matching inputs.
     *
     * @default ''
     */
    equalTo?: string;
}

/**
 * Configures filtering behavior for columns in the Syncfusion React Grid.
 * Defines settings for the filter UI, operator, and component parameters.
 * Used to customize how data is filtered within specific columns.
 */
export interface ColumnFilterConfig {
    /**
     * Specifies the type of filter UI applied to the column, such as 'FilterBar' or other supported filter types.
     * Determines the user interface and interaction style for filtering data in the column.
     * Affects the filtering experience and available controls.
     *
     * @default FilterBar
     * @private
     */
    type?: FilterType;

    /**
     * Specifies the filter type for the column, such as `stringFilter` or `numericFilter`.
     * Defines the filtering logic applied to the column’s data, aligning with its data type.
     * Ensures appropriate filtering behavior for strings, numbers, or other data.
     *
     * @default 'stringFilter'
     */
    filterBarType?: string | FilterBarType;

    /**
     * Defines the operator used for filtering requests, such as `contains` or `equal`.
     * Specifies how the filter value is matched against column data during filtering.
     * Used to customize the filtering logic for specific columns.
     *
     * @default ''
     */
    operator?: string;

    /**
     * Specifies configuration parameters for the filter component, such as text box, numeric input, or dropdown properties.
     * Allows customization of the filter UI components, like placeholders or value ranges.
     * Enhances the filtering experience with tailored input controls.
     *
     * @default {}
     */
    params?: Partial<TextBoxProps & NumericTextBoxProps & DatePickerProps & DropDownListProps>;
}

/**
 * Extended column interface with additional properties for internal grid operations.
 *
 * @private
 */
export interface IColumnBase extends ColumnProps {
    /**
     * Row data for the column.
     *
     * @default null
     */
    row?: IRow<IColumnBase>;

    /**
     * Cell data for the column.
     *
     * @default null
     */
    cell?: ICell<IColumnBase>;

    /**
     * Format function for the column.
     *
     * @default null
     */
    formatFn?: Function;

    /**
     * Parser function for the column.
     *
     * @default null
     */
    parseFn?: Function;

    /**
     * CSS class for header alignment.
     *
     * @default ''
     */
    alignHeaderClass?: string;

    /**
     * CSS class for cell alignment.
     *
     * @default ''
     */
    alignClass?: string;

    /**
     * Formatted value for display.
     *
     * @default null
     */
    formattedValue?: string | ReactNode;

    /**
     * Unique identifier for the column.
     *
     * @default ''
     */
    uid?: string;
}

/**
 * Interface for preparing column configurations in the grid.
 *
 * @private
 */
export interface PrepareColumns {
    /**
     * Array of column configurations.
     *
     * @default []
     */
    columns: ColumnProps[];
    /**
     * Depth level for nested columns.
     *
     * @default 1
     */
    depth: number;
    /**
     * Child elements for the columns.
     *
     * @default null
     */
    children: ReactNode;
    /**
     * Array of column group elements.
     *
     * @default []
     */
    colGroup: JSX.Element[];
    /**
     * Flag indicating if columns have changed.
     *
     * @default false
     */
    isColumnChanged?: boolean;
    /**
     * Flag indicating if UI column properties have changed.
     *
     * @default false
     */
    isUIColumnpropertiesChanged?: boolean;
    /**
     * Array of UI column configurations.
     *
     * @default []
     */
    uiColumns?: ColumnProps[];
}

/**
 * Interface for column reference to DOM elements.
 *
 * @private
 */
export interface ColumnRef {
    /**
     * Reference to the cell DOM element.
     *
     * @default null
     */
    readonly cellRef: RefObject<HTMLTableCellElement | null>;
}
